### שלב ראשון: הקמת צד שרת, התקנת ספריות אשר יסעו לי בפיתוח האפליקציה.
תקציר***: התקנתי את DOVENV בכדי לטעון את ה-SECRET KEY תחילה. 
		הקצאתי משתנה אשר יכיל את הפורט, משתנה אשר ישמור את המפתח הסודי לחיבור עם אטלס.
		יצרתי MW עם פונקציה של CORS בכדי לאפשר בקשות לשרת מדומיינים שונים עוד לפני שישנה בקשה לשרת.
		יצרתי MW אשר יפעיל את ההרשאה לקריאת בקשות לשרת בפורמט JSON
		נוצר MW אשר יכיל את המסלול בנושא הדוחות.
		נוצרה פונקציה אשר מפעילה את השרת יחד עם הפורט ומתחברת למסד הנתונים של MONGO DB, הפונקציה היא א-סינכרונית כיוון שישנה המתנה לתגובה ממונגו.(פונקציה עטופה 		בTRY\CATCH לצורך תפיסת השגיאות בכדי לא להפיל את השרת.)

### שלב שני: בניית סכמת מונגוס וגו'י לצורך ולידציה וטיפול בערכים שגויים שעלולים להגיע לשרת.
תקציר***: יצרתי מופע חדש של המחלקה מונגוס סכמה אשר תקבל באובייקט שלה את השדות אשר המשתמש יזין (שם מלא, מגדר, גיל, גובה, משקל, מטרה ספורטיבית, שומר כשרות?, 				טבעוני?, 	ומאכלים מועדפים), לאחר מכן יצרתי מודל חדש אשר יכיל : את שם המסמך, סכמת מונגוס.
		יצרתי פונקציה אשר מקבל את הפרופיל משתמש כפרמטר ומחזירה את הולידציה של גו'י יחד עם ולידציית השדות.
 
### שלב שלישי: יצירת פונקציית BMR ו-TDEE. הפונקציה של ה-BMR קובעת את קצב חילוף החומרים הבסיסי במנוחה מוחלטת בהאתם למגדר, TDEE אחראי לחישוב ההוצאה הקלורית בהאתם לסגנון החיים של המשתמש.
תקציר***: יצרתי את פונקציה לחישוב ה-BMR של המשתמש, הגדרתי כארגומנטים את המגדר, משקל, גובה וגיל ולפי הנוסחה של MIFFTIN-ST JEOR אני מקבל את התוצאה לכל מגדר.
		יצרתי את פונקציה לחישוב ה-TDEE שהוא אחראי על הוצאת הקלוריות בהאתם לרמת פעילות של האדם, הפונקציה מקבלת כפרמטרים את ה-BMR ואת ה-רמת פעילות. 
		יצרתי אובייקט שמכיל את הרמות פעילות (קל, בינוני, קשה) יחד עם הערכים שלהם.
		החזרתי מהפונקציה את הרמת פעילות אשר הלקוח יזין כפול חישוב ה-BMR שלו. 
	
שלב רביעי: ### תקיית ROUTES וקובץ  שמטפל בנתיבים של המסלול הנוגע לדו''חות.
תקציר***: יצרתי נתיב API של יצירת פרופיל משתמש חדש. 	
		תחילה, השתמשתי בפונקצייה אשר מכילה את הסכמה של גו'י עשיתי פירוק לאובייקט השגיאות שגו'י מכילה עבור הסכמה ועשיתי בדיקה שבמידה ויש שגיאה את אני מחזיר את 			הודעת השגיאה הראשונה שמגיעה, יחד עם סטטוס 400 ועצירת הזרימה והחזרת תגובה מהשרת עם פירוט השגיאה והודעה תואמת.
		לאחר מכן, הקצאתי משתנים אשר יהיו השדות בגוף הבקשה.
		נעשה שימוש בפונקציית חישוב ה-BMR ו-TDEE שיוצרת את החישובים של שריפת הקלוריות במנוחה ושריפת הקלוריות + פעילות ספורטיבית. 
		בעצם אני משתמש בערכים שצפויים להתקבל הגוף הבקשה (מגדר, גובה, משקל וגיל) שם את הפרמטרים בפונקציה BMR ואז משתמש בפונקציה לחישוב ה-TDEE ומכניס את 
		ה-פרמטרים (פעילות ספורטיבית וה- BMR). 
		שומר אותם יחד עם הכל הערכים אשר התקבלו בגוף הבקשה, שומר את המסמך החדש יחד עם כל הערכים נעשה שימוש א-סינכרוני בפונקציית CREATE של MONGOOS 
 		כיוון שאני ממתין לתשובה מה-API של מונגו ולבסוף שמירת המסמך.

### שלב חמישי: אינטרציה עם ה-API של GOOGLE GEMINI, יצירת דו''ח, ושליחתו לשרת.
תקציר***: יצרתי פונקציה שמקבל כפרמטר את פרופיל המשתמש והיא מטפלת באינטגרציה עם ה-API של GEMINI ויוצרת דו''ח מותאם אישית למשתמש.
		תחילה נבדק האם קיים פרופיל בכלל, בדקתי האם אורך המפתחות שיש לUSER PROFIL באובייקט הוא שווה ל-0 כלומר אובייקט ריק במידה והוא ריק מחזיר הודעה תואמת אחרת 		מחזיר את האובייקט פרופיל משתמש.
		יצרתי מופע חדש של מחלקה של GOOGLE GENERATIVE AI אשר מקבל את המפתח הסודי שקיבלתי עבור חיבור שירות הממשק לשרת שלי.
		נבחר מודל שעליו התבסס העיבוד (GOOGLE GENERATIVE MODEL) 
		יצירת פרומט אשר ינחה את המכונה מה הדו''ח שמצופה להתקבל יחד עם ערכי פרופיל משתמש.
		שליחת הפרומפט כפרמטר לפונקציית GENERATE MODEL, השימוש בפונקצייה הוא בצורה א-סיכרונית מכיוון שאנו ממתינים לתשובה שמגיע ממקור אחר 
		לבסוף, מוחזר מהפונקצייה התגובה מאותו מודל בצורה טקסטואלית.
		הפונקצייה עטופה ב-TRY/CATCH כיוון שיכולות להיתפס שגיאות ולהקריס את השרת במצב בו יש שגיאה מהאינטגרציה של השירות. השגיאה נתפסת כפרמטר ב-CATCH ומוחזר			פולבאק עם הודעה תואמת.
		שימוש בפונקצייה אשר יוצרת את הדו''ח, נעשה שימוש בה בראוט ליצירת דוחות, תחילה יצרתי אובייקט בו אני מחזיר את כל השדות אשר קיימים במסמך ואותו שולח לפונקציה ליצירת 		דוחות אשר תעבד את הנתונים ותחזיר תגובה תואמת למשתמש.

### שלב שישי: הקמת צד לקוח בעזרת ספריית JS שהיא REACT עבור יצירת ממשק UI.
	תקציר***: בחרתי בREACT+VITE כיוון ניתן להשתמש ברכיבים חוזרים לא צריך לכתוב את אותו הקוד כמה פעמים (חוסך בזמן), ניתן לרשום HTML ו-JS באותו הקובץ בעזרת JSX,
			מונע עומס מיותר על ה-DOM בזכות הוירטואל דום שיש לריאקט להציע.
			התקנתי את בוטסטראפ בנוסף למען האצת הפרוייקט על ידיי שימוש במחלקות, יצרתי רכיב ראשוני אשר יקבל את המשתמש בברכה יחד עם ההנחייה ומטרת האתר.

### שלב שביעי: התקנתי את ספריית פורמיק אשר תחסוך לי ביצירת STATES עבור כל שדה לטופס ותעזור לי לנהל את השגיאות של השדות בצורה נוחה יותר.
	תקציר***: נעשה שימוש בסטייט של פורמיק (USE FORMIK) ושימוש במתודות והאובייקטים שלו.
			INITIAL VALUE- הגדרת השדות והערכים ההתחלתיים, בעצם מכאן פורמיק ידע מאיפה להתחיל.
			VALIDATE- פונקציית אשר יוצרת אובייקט של שגיאות של פורמיק בעזרת מנגנון ניהול שגיאות או לחילופין JOI. יצרתי סכמה של ג'וי אשר מכילה את אותו הסכמה שנוצרה 				קודם בצד השרת, החזרתי מהסכמה את אובייקט השגיאות, יצרתי משתנה אשר יכיל אובייקט שגיאות, הרצתי לולאה אשר תעבור על כל פרטי השגיאות ותתפוס את השגיאה 				שדה עליו נעשה השגיאה ותישמר כמפתח באובייקט ERRORS שיצרתי, וכערך יהיה הודעת השגיאה עצמה.
			פונקציית ON SUBMIT- מקבלת את הערכים שבשדות הטופס כפרמטר ושולחת אותן לשרת, יחד עם זאת השתמשתי בפוקציית REST FORM של ONSUBMIT 
			והפעלתי את הפונקציית שינוי של USE TRANSTION לאחר שנשלחה הבקשה לשרת והשינוי שהיא עושה זה לאפס את הטופס היא עושה את הפעולה של איפוס הטופס לאחר 			שמסתיימות הפעולות האחרות בכדי לא להעמיס על ה-DOM.
					 
			
		




	
	
		